// /app/api/anime/[id]/route.ts

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    const { id } = params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    if (!id || !/^\d+$/.test(id)) {
      return NextResponse.json({ error: "Invalid anime ID format" }, { status: 400 });
    }

    console.log(`üé¨ Fetching all data for shikimori_id: ${id}`);

    // ====================================================================
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ü–†–û–°
    // –ú—ã –¥–µ–ª–∞–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
    // 1. –í—Å–µ –ø–æ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `animes` (*).
    // 2. –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `translations` (*).
    // 3. –ò–º–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤, —Å—Ç—É–¥–∏–π –∏ —Å—Ç—Ä–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
    // ====================================================================
    const { data, error } = await supabase
      .from("animes")
      .select(`
        *, 
        translations(*),
        genres:anime_genres(genres(name)),
        studios:anime_studios(studios(name)),
        countries:anime_countries(countries(name))
      `)
      .eq("shikimori_id", id)
      .single(); // .single() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –º–∞—Å—Å–∏–≤–∞

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç Supabase
    if (error) {
      // –ï—Å–ª–∏ –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, Supabase –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É —Å –∫–æ–¥–æ–º PGRST116
      if (error.code === 'PGRST116') {
        console.warn(`üïµÔ∏è Anime with shikimori_id ${id} not found.`);
        return NextResponse.json({ error: "Anime not found" }, { status: 404 });
      }
      // –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      throw error;
    }

    // ====================================================================
    // –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•
    // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
    // –ú—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ [{ genres: { name: '–≠–∫—à–µ–Ω' } }] –¥–µ–ª–∞–µ–º ['–≠–∫—à–µ–Ω'].
    // ====================================================================
    const responseData = {
      ...data,
      genres: data.genres.map((g: any) => g.genres.name).filter(Boolean),
      studios: data.studios.map((s: any) => s.studios.name).filter(Boolean),
      countries: data.countries.map((c: any) => c.countries.name).filter(Boolean),
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ translations –≤—Å–µ–≥–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      translations: data.translations || [],
    };

    return NextResponse.json(responseData);

  } catch (err) {
    const message = err instanceof Error ? err.message : "Unknown error";
    console.error("‚ùå Error in /api/anime/[id]:", message);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
