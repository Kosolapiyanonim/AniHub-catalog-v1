import time
import requests
import os
from supabase import create_client, Client
from typing import List

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://your-project-url.supabase.co")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY", "your-service-role-key")
KODIK_TOKEN = os.getenv("KODIK_API_TOKEN", "0be448ef5f98485a4edcf09bb0969ae3")

print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
print(f"  - Supabase URL: {SUPABASE_URL}")
print(f"  - Supabase Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if SUPABASE_KEY != 'your-service-role-key' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"  - Kodik Token: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if KODIK_TOKEN != '0be448ef5f98485a4edcf09bb0969ae3' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print()

def process_relations(supabase: Client, anime_id: int, items: List[str], relation_type: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤—è–∑–∏ (–∂–∞–Ω—Ä—ã, —Å—Ç—É–¥–∏–∏, —Å—Ç—Ä–∞–Ω—ã)."""
    if not items:
        return
    
    table_name = f"{relation_type}s"
    
    for item_name in items:
        if not item_name:
            continue
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            relation_data = supabase.table(table_name).upsert(
                {"name": item_name}
            ).execute().data[0]
            relation_id = relation_data['id']
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
            supabase.table("anime_relations").upsert({
                "anime_id": anime_id,
                "relation_id": relation_id,
                "relation_type": relation_type
            }).execute()
            
            print(f"    - ‚úÖ –°–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {item_name} ({relation_type})")
        except Exception as e:
            print(f"    - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–≤—è–∑–∏ '{item_name}' ({relation_type}): {e}")

def run_test_parser():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ 10 –∞–Ω–∏–º–µ."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    try:
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_response = supabase.table("animes").select("count", count="exact").execute()
        current_count = test_response.count or 0
        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–µ –≤ –±–∞–∑–µ: {current_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return
    
    # –ó–∞–ø—Ä–æ—Å –∫ Kodik API
    api_url = "https://kodikapi.com/list"
    params = {
        "token": KODIK_TOKEN,
        "limit": 10,  # –¢–æ–ª—å–∫–æ 10 –¥–ª—è —Ç–µ—Å—Ç–∞
        "types": "anime,anime-serial",
        "with_material_data": "true",
        "sort": "shikimori_rating",
        "order": "desc"
    }
    
    print("\nüåÄ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 10 –ª—É—á—à–∏—Ö –∞–Ω–∏–º–µ –¥–ª—è —Ç–µ—Å—Ç–∞...")
    try:
        response = requests.get(api_url, params=params, timeout=30)
        response.raise_for_status()
        data = response.json()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Kodik API: {len(data.get('results', []))} –∞–Ω–∏–º–µ")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return
    
    anime_list = data.get("results", [])
    if not anime_list:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞.")
        return
    
    print(f"\nüì• –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(anime_list)} –∞–Ω–∏–º–µ...")
    processed_count = 0
    
    for i, anime_data in enumerate(anime_list, 1):
        material_data = anime_data.get("material_data") or {}
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–µ –±–µ–∑ shikimori_id
        if not anime_data.get("shikimori_id"):
            print(f"  {i}. ‚è© –ü—Ä–æ–ø—É—Å–∫: '{anime_data.get('title')}' (–Ω–µ—Ç shikimori_id)")
            continue
        
        title = anime_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        shikimori_id = anime_data.get("shikimori_id")
        rating = material_data.get("shikimori_rating", 0)
        
        print(f"  {i}. üì• –û–±—Ä–∞–±–æ—Ç–∫–∞: {title}")
        print(f"      - Shikimori ID: {shikimori_id}")
        print(f"      - –†–µ–π—Ç–∏–Ω–≥: {rating}")
        print(f"      - –ì–æ–¥: {anime_data.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            record_to_upsert = {
                "kodik_id": anime_data.get("id"),
                "shikimori_id": shikimori_id,
                "kinopoisk_id": anime_data.get("kinopoisk_id"),
                "title": title,
                "title_orig": anime_data.get("title_orig"),
                "year": anime_data.get("year"),
                "poster_url": material_data.get("poster_url") or material_data.get("anime_poster_url"),
                "player_link": anime_data.get("link"),
                "description": material_data.get("description") or material_data.get("anime_description"),
                "type": anime_data.get("type"),
                "status": material_data.get("anime_status"),
                "episodes_count": anime_data.get("episodes_count"),
                "rating_mpaa": material_data.get("rating_mpaa"),
                "kinopoisk_rating": material_data.get("kinopoisk_rating"),
                "imdb_rating": material_data.get("imdb_rating"),
                "shikimori_rating": material_data.get("shikimori_rating"),
                "kinopoisk_votes": material_data.get("kinopoisk_votes"),
                "shikimori_votes": material_data.get("shikimori_votes"),
                "screenshots": {"screenshots": anime_data.get("screenshots", [])},
                "updated_at_kodik": anime_data.get("updated_at")
            }
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–µ
            upsert_response = supabase.table("animes").upsert(
                record_to_upsert,
                on_conflict="shikimori_id"
            ).execute()
            
            our_anime_id = upsert_response.data[0]['id']
            print(f"      - ‚úÖ –ê–Ω–∏–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: {our_anime_id})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∏
            genres = material_data.get('anime_genres', [])
            studios = material_data.get('anime_studios', [])
            countries = material_data.get('countries', [])
            
            if genres:
                print(f"      - üè∑Ô∏è –ñ–∞–Ω—Ä—ã: {', '.join(genres[:3])}{'...' if len(genres) > 3 else ''}")
                process_relations(supabase, our_anime_id, genres, 'genre')
            
            if studios:
                print(f"      - üè¢ –°—Ç—É–¥–∏–∏: {', '.join(studios[:2])}{'...' if len(studios) > 2 else ''}")
                process_relations(supabase, our_anime_id, studios, 'studio')
            
            if countries:
                print(f"      - üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(countries)}")
                process_relations(supabase, our_anime_id, countries, 'country')
            
            processed_count += 1
            print(f"      - ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
            
        except Exception as e:
            print(f"      - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{title}': {e}")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    print(f"üéâ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–Ω–∏–º–µ: {processed_count} –∏–∑ {len(anime_list)}")
    print(f"üíæ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∞—à–µ–π –±–∞–∑–µ Supabase")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    try:
        final_response = supabase.table("animes").select("count", count="exact").execute()
        final_count = final_response.count or 0
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–µ –≤ –±–∞–∑–µ: {final_count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–≤—è–∑—è–º
        genres_response = supabase.table("genres").select("count", count="exact").execute()
        studios_response = supabase.table("studios").select("count", count="exact").execute()
        countries_response = supabase.table("countries").select("count", count="exact").execute()
        
        print(f"üè∑Ô∏è –ñ–∞–Ω—Ä–æ–≤ –≤ –±–∞–∑–µ: {genres_response.count or 0}")
        print(f"üè¢ –°—Ç—É–¥–∏–π –≤ –±–∞–∑–µ: {studios_response.count or 0}")
        print(f"üåç –°—Ç—Ä–∞–Ω –≤ –±–∞–∑–µ: {countries_response.count or 0}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    run_test_parser()
