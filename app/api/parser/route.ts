// /app/api/parser/route.ts

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";
import type { KodikAnimeData, AnimeRecord } from "@/lib/types";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤—è–∑–µ–π
async function processRelations(
  anime_id: number,
  items: string[],
  relation_type: "genre" | "studio" | "country"
) {
  if (!items || items.length === 0) return;

  const tableName = relation_type === "country" ? "countries" : `${relation_type}s`;

  for (const name of items) {
    if (!name?.trim()) continue;
    try {
      const { data: relData, error: relErr } = await supabase
        .from(tableName)
        .upsert({ name: name.trim() }, { onConflict: "name" })
        .select("id")
        .single();

      if (relErr) throw relErr;

      await supabase
        .from("anime_relations")
        .upsert(
          { anime_id, relation_id: relData.id, relation_type },
          { onConflict: "anime_id,relation_id,relation_type" }
        );
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤—è–∑–∏ ${relation_type} - ${name}:`, error);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞
export async function POST(request: Request) {
  const output: string[] = [];
  const log = (message: string) => {
    console.log(message);
    output.push(message);
  };

  try {
    log("üöÄ –ó–∞–ø—É—Å–∫ TypeScript-–ø–∞—Ä—Å–µ—Ä–∞...");

    const body = await request.json().catch(() => ({}));
    const pagesToParse = body.pagesToParse || 1;
    let currentPageUrl: string | null = `https://kodikapi.com/list`;
    let pagesParsed = 0;

    const KODIK_TOKEN = process.env.KODIK_API_TOKEN;
    if (!KODIK_TOKEN) throw new Error("KODIK_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");

    log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –¶–µ–ª—å: ${pagesToParse} —Å—Ç—Ä–∞–Ω–∏—Ü.`);

    log("üîç –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–∏–º–µ –∏–∑ –±–∞–∑—ã...");
    const { data: existingIdsData, error: idsError } = await supabase.from("animes").select("shikimori_id");
    if (idsError) throw idsError;
    const existingShikimoriIds = new Set(existingIdsData.map(item => item.shikimori_id));
    log(`‚úÖ –í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ ${existingShikimoriIds.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–Ω–∏–º–µ.`);

    // –¶–∏–∫–ª –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    while (pagesParsed < pagesToParse && currentPageUrl) {
      pagesParsed++;
      log("-".repeat(50));
      log(`üåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Ññ${pagesParsed}...`);

      const params = new URLSearchParams({
        token: KODIK_TOKEN,
        limit: "100",
        types: "anime,anime-serial",
        with_material_data: "true",
        sort: "shikimori_rating",
        order: "desc",
      });

      const response = await fetch(`${currentPageUrl}?${params.toString()}`);
      if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç Kodik API: ${response.statusText}`);

      const data = await response.json();
      const rawAnimeList: KodikAnimeData[] = data.results || [];

      const newAnimes = rawAnimeList.filter(anime => anime.shikimori_id && !existingShikimoriIds.has(anime.shikimori_id));
      log(`üîÑ –ü–æ–ª—É—á–µ–Ω–æ ${rawAnimeList.length} –∑–∞–ø–∏—Å–µ–π. –ò–∑ –Ω–∏—Ö –Ω–æ–≤—ã—Ö –¥–ª—è –Ω–∞—à–µ–π –±–∞–∑—ã: ${newAnimes.length}.`);

      if (newAnimes.length > 0) {
        for (const anime of newAnimes) {
            const material = anime.material_data || {};
            log(`  üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${anime.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);

            try {
                // --- –ù–ê–ß–ê–õ–û: –ü–û–õ–ù–´–ô –û–ë–™–ï–ö–¢ –î–õ–Ø –ó–ê–ü–ò–°–ò ---
                const record: AnimeRecord = {
                    kodik_id: anime.id,
                    shikimori_id: anime.shikimori_id!,
                    kinopoisk_id: anime.kinopoisk_id,
                    title: anime.title,
                    title_orig: anime.title_orig,
                    year: anime.year,
                    poster_url: material.anime_poster_url || material.poster_url, // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
                    player_link: anime.link,
                    description: material.description || material.anime_description,
                    type: anime.type,
                    status: material.anime_status,
                    episodes_count: anime.episodes_count,
                    rating_mpaa: material.rating_mpaa,
                    kinopoisk_rating: material.kinopoisk_rating,
                    shikimori_rating: material.shikimori_rating,
                    kinopoisk_votes: material.kinopoisk_votes,
                    shikimori_votes: material.shikimori_votes,
                    screenshots: { screenshots: anime.screenshots || [] },
                    updated_at_kodik: anime.updated_at,
                };
                // --- –ö–û–ù–ï–¶: –ü–û–õ–ù–´–ô –û–ë–™–ï–ö–¢ –î–õ–Ø –ó–ê–ü–ò–°–ò ---

                const { data: upserted, error: upsertError } = await supabase.from('animes').upsert(record, { onConflict: 'shikimori_id' }).select('id').single();

                if (upsertError) {
                    log(`      - ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∏–º–µ ${anime.title}: ${upsertError.message}`);
                    continue;
                }

                await processRelations(upserted.id, material.anime_genres || [], 'genre');
                await processRelations(upserted.id, material.anime_studios || [], 'studio');
                await processRelations(upserted.id, material.countries || [], 'country');
                
                existingShikimoriIds.add(anime.shikimori_id!);
                log(`      - ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (ID: ${upserted.id})`);

            } catch (e) {
                log(`      - ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '${anime.title}': ${e instanceof Error ? e.message : String(e)}`);
            }
        }
      }
      
      currentPageUrl = data.next_page;
      if (!currentPageUrl) log("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ Kodik API.");
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    log("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    return NextResponse.json({ status: 'success', output: output.join('\n') });

  } catch (err) {
    const message = err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
    return NextResponse.json({ status: 'error', message, output: output.join('\n') }, { status: 500 });
  }
}
