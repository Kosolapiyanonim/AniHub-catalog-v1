// /app/catalog/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { AnimeCard } from '@/components/anime-card';
import { LoadingSpinner } from '@/components/loading-spinner';

interface Anime {
  id: number;
  shikimori_id: string;
  title: string;
  poster_url?: string;
  year?: number;
}

export default function CatalogPage() {
  const [animes, setAnimes] = useState<Anime[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const fetchCatalogData = async () => {
      setLoading(true);
      setError(null);
      console.log("[FRONTEND] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞...");
      
      try {
        const response = await fetch('/api/catalog?limit=24'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 24
        console.log("[FRONTEND] ‚¨ÖÔ∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API, —Å—Ç–∞—Ç—É—Å:", response.status);

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.statusText}`);
        }

        const data = await response.json();
        console.log("[FRONTEND] üìÑ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", data);

        if (!data.results) {
            throw new Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ 'results'");
        }

        setAnimes(data.results);
        console.log("[FRONTEND] ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ 'animes' –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –≤ –Ω–µ–º —Ç–µ–ø–µ—Ä—å", data.results.length, "—ç–ª–µ–º–µ–Ω—Ç–æ–≤.");

      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
        console.error("[FRONTEND] ‚ùå –û—à–∏–±–∫–∞:", errorMessage);
        setError(errorMessage);
      } finally {
        setLoading(false);
        console.log("[FRONTEND] üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
      }
    };

    fetchCatalogData();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑"

  // --- –õ–æ–≥–∏–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ ---

  if (loading) {
    return <div className="flex justify-center items-center h-screen"><LoadingSpinner size="lg" /></div>;
  }

  if (error) {
    return <div className="text-center text-red-500 pt-32">–û—à–∏–±–∫–∞: {error}</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8 pt-24">
      <h1 className="text-3xl font-bold text-white mb-8">–ö–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ ({animes.length})</h1>
      
      {animes.length === 0 ? (
        <p className="text-white text-center">–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
      ) : (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
          {animes.map((animeItem) => (
            <AnimeCard key={animeItem.id} anime={animeItem} />
          ))}
        </div>
      )}
    </div>
  );
}
