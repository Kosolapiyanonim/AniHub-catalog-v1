// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: /app/api/anime/[id]/route.ts
import { NextResponse } from "next/server"
import { supabase } from "@/lib/supabase"

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    const { id } = params;

    // **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:** ID —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è kodik_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, "serial-12345").
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ "undefined".
    if (!id || id === "undefined") {
      return NextResponse.json({ error: "Invalid anime ID format" }, { status: 400 });
    }

    console.log("üé¨ Fetching anime data for kodik_id:", id);

    // **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:** –ò—â–µ–º –ø–æ kodik_id –≤ –Ω–∞—à–µ–º VIEW.
    const { data, error } = await supabase
      .from("animes_with_relations")
      .select("*")
      .eq("kodik_id", id) // –ò—â–µ–º –ø–æ kodik_id
      .limit(1)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
         console.log(`‚ùå Anime with kodik_id ${id} not found in DB.`);
         return NextResponse.json({ error: "Anime not found" }, { status: 404 });
      }
      console.error(`‚ùå Database error for kodik_id ${id}:`, error);
      return NextResponse.json({ error: "Database error" }, { status: 500 });
    }

    console.log("‚úÖ Anime found:", data.title);
    return NextResponse.json(data);

  } catch (error) {
    console.error("‚ùå Error in anime API:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
