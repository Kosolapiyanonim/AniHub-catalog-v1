// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: /app/admin/parser/page.tsx
"use client";

import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Play, Pause, ChevronsRight, RefreshCw } from "lucide-react";

export default function ParserAdminPage() {
  const [logs, setLogs] = useState<string[]>(["–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –≥–æ—Ç–æ–≤–∞."]);
  const [isRunning, setIsRunning] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const isCancelled = useRef(false);

  const [nextPageUrl, setNextPageUrl] = useState<string | null>(null);
  const [pageCount, setPageCount] = useState(0);
  const [stats, setStats] = useState({ processed: 0, errors: 0 });

  const addLog = (message: string) => {
    setLogs(prev => [...prev.slice(-100), `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const parseOnePage = async (url: string | null) => {
    const currentPageCounter = pageCount + 1;
    addLog(`üåÄ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPageCounter}...`);
    try {
      const response = await fetch('/api/parse-single-page', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ nextPageUrl: url }),
      });
      const result = await response.json();
      if (!response.ok) throw new Error(result.error || `HTTP ${response.status}`);
      
      addLog(`‚úÖ ${result.message}`);
      setStats(prev => ({ ...prev, processed: prev.processed + result.processed }));
      setNextPageUrl(result.nextPageUrl);
      setPageCount(currentPageCounter);
      return result.nextPageUrl;
    } catch (error) {
      const message = error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      addLog(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPageCounter}: ${message}`);
      setStats(prev => ({ ...prev, errors: prev.errors + 1 }));
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
  const startFullParsing = async () => {
    setIsRunning(true);
    isCancelled.current = false;
    addLog("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...");
    let currentUrl = nextPageUrl;
    
    while (!isCancelled.current) {
      try {
        const nextUrl = await parseOnePage(currentUrl);
        currentUrl = nextUrl;
        if (currentUrl) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        } else {
          addLog("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞. –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.");
          break;
        }
      } catch (error) {
        addLog("üõë –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.");
        break;
      }
    }
    if (isCancelled.current) addLog("‚è∏Ô∏è –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
    setIsRunning(false);
  };
  
  // –ü–∞—Ä—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const handleParseNextPage = async () => {
      if (isRunning || isUpdating) return;
      setIsUpdating(true);
      try {
          await parseOnePage(nextPageUrl);
      } catch (error) {
          // –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ parseOnePage
      }
      setIsUpdating(false);
  };

  // –ü–∞—Ä—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleParseLatest = async () => {
      if (isRunning || isUpdating) return;
      setIsUpdating(true);
      addLog("üîÑ –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...");
      try {
          const response = await fetch('/api/parse-latest', { method: 'POST' });
          const result = await response.json();
          if (!response.ok) throw new Error(result.error || `HTTP ${response.status}`);
          addLog(`‚úÖ ${result.message}`);
          setStats(prev => ({ ...prev, processed: prev.processed + result.processed }));
      } catch (error) {
          const message = error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
          addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${message}`);
          setStats(prev => ({ ...prev, errors: prev.errors + 1 }));
      }
      setIsUpdating(false);
  };

  return (
    <div className="container mx-auto px-4 py-8 pt-24">
      <Card>
        <CardHeader>
          <CardTitle>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div className="space-y-2">
                  <h3 className="font-semibold">–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</h3>
                  <div className="flex gap-2">
                      <Button onClick={startFullParsing} disabled={isRunning || isUpdating}>
                          <Play className="mr-2 h-4 w-4" />
                          {pageCount > 0 ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ù–∞—á–∞—Ç—å'}
                      </Button>
                      <Button onClick={() => { isCancelled.current = true; setIsRunning(false); }} disabled={!isRunning} variant="outline">
                          <Pause className="mr-2 h-4 w-4" />
                          –ü–∞—É–∑–∞
                      </Button>
                  </div>
              </div>
              <div className="space-y-2">
                  <h3 className="font-semibold">–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
                  <div className="flex gap-2">
                      <Button onClick={handleParseNextPage} disabled={isRunning || isUpdating || !nextPageUrl} variant="secondary">
                          <ChevronsRight className="mr-2 h-4 w-4" />
                          –°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                      </Button>
                      <Button onClick={handleParseLatest} disabled={isRunning || isUpdating} variant="secondary">
                          <RefreshCw className="mr-2 h-4 w-4" />
                          –û–±–Ω–æ–≤–∏—Ç—å
                      </Button>
                  </div>
              </div>
          </div>
          <div className="grid grid-cols-3 gap-4 mb-4 text-center">
            <div className="p-4 bg-slate-100 rounded-lg dark:bg-slate-800">
              <p className="text-sm text-slate-500 dark:text-slate-400">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü</p>
              <p className="text-2xl font-bold">{pageCount}</p>
            </div>
            <div className="p-4 bg-green-100 rounded-lg dark:bg-green-900/50">
              <p className="text-sm text-green-600 dark:text-green-400">–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π</p>
              <p className="text-2xl font-bold text-green-700 dark:text-green-300">{stats.processed}</p>
            </div>
            <div className="p-4 bg-red-100 rounded-lg dark:bg-red-900/50">
              <p className="text-sm text-red-600 dark:text-red-400">–û—à–∏–±–∫–∏</p>
              <p className="text-2xl font-bold text-red-700 dark:text-red-300">{stats.errors}</p>
            </div>
          </div>
          <p className="text-sm text-slate-500 mb-2">–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</p>
          <ScrollArea className="h-72 w-full rounded-md border p-4 font-mono text-sm">
            {logs.map((log, i) => (
              <p key={i}>{log}</p>
            ))}
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}
