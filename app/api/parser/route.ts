// /app/api/parser/route.ts

import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";
import type { KodikAnimeData } from "@/lib/types";

// ====================================================================
// GET-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (—Ä–µ—à–∞–µ—Ç –æ—à–∏–±–∫—É 405)
// ====================================================================
export async function GET() {
  return NextResponse.json({ status: "ok", message: "Parser API is online." });
}

// ====================================================================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤—è–∑–µ–π
// ====================================================================

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∏–ø —Å–≤—è–∑–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –∂–∞–Ω—Ä—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã) –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º.
 */
async function processRelationsBatch(
  supabaseClient: any,
  relationData: { anime_id: number; name: string }[],
  relation_type: "genre" | "studio" | "country"
) {
  if (!relationData || relationData.length === 0) return;

  const tableName = relation_type === "country" ? "countries" : `${relation_type}s`;
  const idFieldName = `${relation_type}_id`;
  const relationTableName = `anime_${tableName}`;

  // 1. –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (genres, studios, etc.)
  const uniqueNames = [...new Set(relationData.map(r => r.name))];
  const { data: existingItems, error: upsertError } = await supabaseClient
    .from(tableName)
    .upsert(uniqueNames.map(name => ({ name })), { onConflict: 'name' })
    .select('id, name');

  if (upsertError) throw upsertError;
  if (!existingItems) return;

  // 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É "–∏–º—è -> id" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const itemMap = new Map(existingItems.map(item => [item.name, item.id]));

  // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–µ–π (anime_genres, etc.)
  const relationsToUpsert = relationData
    .map(rel => {
      const relationId = itemMap.get(rel.name);
      if (!relationId) return null;
      return {
        anime_id: rel.anime_id,
        [idFieldName]: relationId,
      };
    })
    .filter(Boolean);

  // 4. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
  if (relationsToUpsert.length > 0) {
    const { error: relationError } = await supabaseClient
      .from(relationTableName)
      .upsert(relationsToUpsert, { onConflict: `anime_id,${idFieldName}` });
    
    if (relationError) console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–µ –≤ ${relationTableName}:`, relationError);
  }
}


// ====================================================================
// –û—Å–Ω–æ–≤–Ω–æ–π POST-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–æ–≤–æ–π, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
// ====================================================================
export async function POST(request: Request) {
  const output: string[] = [];
  const log = (message: string) => {
    console.log(message);
    output.push(message);
  };

  try {
    log("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...");
    const body = await request.json().catch(() => ({}));
    const pagesToParse = body.pagesToParse || 1;
    let currentPageUrl: string | null = "https://kodikapi.com/list"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π URL, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–±–∞–≤–∏–º –Ω–∏–∂–µ
    let pagesParsed = 0;
    let totalNew = 0;
    let totalUpdated = 0;

    const KODIK_TOKEN = process.env.KODIK_API_TOKEN;
    if (!KODIK_TOKEN) throw new Error("KODIK_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –¶–µ–ª—å: ${pagesToParse} —Å—Ç—Ä–∞–Ω–∏—Ü.`);

    while (pagesParsed < pagesToParse && currentPageUrl) {
      pagesParsed++;
      log("-".repeat(50));
      log(`üåä –í–æ–ª–Ω–∞ ‚Ññ${pagesParsed}. –ó–∞–ø—Ä–æ—Å –∫ Kodik API...`);

      const targetUrl = new URL(currentPageUrl);
      targetUrl.searchParams.set("token", KODIK_TOKEN);
      targetUrl.searchParams.set("limit", "100");
      targetUrl.searchParams.set("types", "anime,anime-serial");
      targetUrl.searchParams.set("with_material_data", "true");
      
      const response = await fetch(targetUrl);
      if (!response.ok) {
        log(`‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç Kodik API –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pagesParsed}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
        continue;
      }

      const data = await response.json();
      const animeListFromKodik: KodikAnimeData[] = data.results || [];
      log(`üîÑ –ü–æ–ª—É—á–µ–Ω–æ ${animeListFromKodik.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
      
      if (animeListFromKodik.length === 0) {
        currentPageUrl = data.next_page;
        continue;
      }

      // 1. –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–Ω–∏–º–µ –ø–æ shikimori_id
      const uniqueAnimeMap = new Map<string, KodikAnimeData>();
      animeListFromKodik.forEach(anime => {
        if (anime.shikimori_id && !uniqueAnimeMap.has(anime.shikimori_id)) {
            uniqueAnimeMap.set(anime.shikimori_id, anime);
        }
      });
      const uniqueAnimeList = Array.from(uniqueAnimeMap.values());
      const shikimoriIds = uniqueAnimeList.map(a => a.shikimori_id!);

      // 2. –£–∑–Ω–∞–µ–º, –∫–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö ID —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const { data: existingAnimes } = await supabase.from('animes').select('shikimori_id').in('shikimori_id', shikimoriIds);
      const existingIdsSet = new Set(existingAnimes?.map(a => a.shikimori_id));

      // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –û–°–ù–û–í–ù–´–ï –∑–∞–ø–∏—Å–∏ –∞–Ω–∏–º–µ
      const animeRecordsToUpsert = uniqueAnimeList.map(anime => {
          const material = anime.material_data || {};
          return {
            shikimori_id: anime.shikimori_id,
            kinopoisk_id: anime.kinopoisk_id,
            title: material.anime_title || anime.title,
            title_orig: anime.title_orig,
            year: anime.year,
            poster_url: material.anime_poster_url || material.poster_url,
            description: material.anime_description || material.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
            type: anime.type,
            status: material.anime_status,
            episodes_count: anime.episodes_count || material.episodes_total || 0,
            rating_mpaa: material.rating_mpaa,
            kinopoisk_rating: material.kinopoisk_rating,
            imdb_rating: material.imdb_rating,
            shikimori_rating: material.shikimori_rating,
            kinopoisk_votes: material.kinopoisk_votes,
            shikimori_votes: material.shikimori_votes,
            screenshots: { screenshots: anime.screenshots || [] },
            updated_at_kodik: anime.updated_at,
            raw_data: anime,
          };
      });

      const { data: upsertedAnimes, error: upsertError } = await supabase
        .from('animes')
        .upsert(animeRecordsToUpsert, { onConflict: 'shikimori_id' })
        .select('id, shikimori_id');

      if (upsertError) throw upsertError;
      if (!upsertedAnimes) {
          log("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–≤—è–∑–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");
          continue;
      }
      
      log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${upsertedAnimes.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω–∏–º–µ.`);

      // 4. **–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø**: –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–≤—è–∑–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
      const animeIdMap = new Map(upsertedAnimes.map(a => [a.shikimori_id, a.id]));
      const allGenres: { anime_id: number; name: string }[] = [];
      const allStudios: { anime_id: number; name: string }[] = [];
      const allCountries: { anime_id: number; name: string }[] = [];

      for (const anime of uniqueAnimeList) {
        const animeId = animeIdMap.get(anime.shikimori_id!);
        if (!animeId) continue;

        const material = anime.material_data || {};
        material.anime_genres?.forEach(name => allGenres.push({ anime_id: animeId, name }));
        material.anime_studios?.forEach(name => allStudios.push({ anime_id: animeId, name }));
        material.countries?.forEach(name => allCountries.push({ anime_id: animeId, name }));
      }

      // 5. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–≤—è–∑–µ–π
      log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤—è–∑–µ–π: ${allGenres.length} –∂–∞–Ω—Ä–æ–≤, ${allStudios.length} —Å—Ç—É–¥–∏–π, ${allCountries.length} —Å—Ç—Ä–∞–Ω...`);
      await Promise.all([
        processRelationsBatch(supabase, allGenres, 'genre'),
        processRelationsBatch(supabase, allStudios, 'studio'),
        processRelationsBatch(supabase, allCountries, 'country'),
      ]);
      log("‚úÖ –°–≤—è–∑–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const newCount = upsertedAnimes.filter(a => !existingIdsSet.has(a.shikimori_id)).length;
      const updatedCount = upsertedAnimes.length - newCount;
      totalNew += newCount;
      totalUpdated += updatedCount;
      
      currentPageUrl = data.next_page;
      if (!currentPageUrl) log("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ Kodik API.");
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    log("=" .repeat(50));
    log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–æ–±–∞–≤–ª–µ–Ω–æ ${totalNew} –Ω–æ–≤—ã—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated}.`);

    return NextResponse.json({ status: 'success', output: output.join('\n') });

  } catch (err) {
    const message = err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${message}`);
    return NextResponse.json({ status: 'error', message, output: output.join('\n') }, { status: 500 });
  }
}
