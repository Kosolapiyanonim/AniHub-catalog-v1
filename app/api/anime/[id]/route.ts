// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: /app/api/anime/[id]/route.ts
import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    const { id: kodikId } = params; // ID —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è kodik_id

    if (!kodikId || kodikId === "undefined") {
      return NextResponse.json({ error: "Invalid anime ID provided" }, { status: 400 });
    }

    console.log("üé¨ Fetching anime data for kodik_id:", kodikId);

    // –®–∞–≥ 1: –ù–∞–π—Ç–∏ –æ–¥–Ω—É –æ–∑–≤—É—á–∫—É –ø–æ kodik_id, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π anime_id
    const { data: translation, error: translationError } = await supabase
      .from('translations')
      .select('anime_id')
      .eq('kodik_id', kodikId)
      .single();
    
    if (translationError) {
        if (translationError.code === 'PGRST116') {
           return NextResponse.json({ error: "Translation not found for the given Kodik ID" }, { status: 404 });
        }
        throw translationError;
    }

    const animeId = translation.anime_id;

    // –®–∞–≥ 2: –ù–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –ø–æ –µ–≥–æ –≥–ª–∞–≤–Ω–æ–º—É ID
    const { data: animeData, error: animeError } = await supabase
      .from("animes_with_relations")
      .select("*")
      .eq("id", animeId)
      .single();

    if (animeError) {
      if (animeError.code === 'PGRST116') {
         return NextResponse.json({ error: "Anime data not found" }, { status: 404 });
      }
      throw animeError;
    }

    // –®–∞–≥ 3: –ù–∞–π—Ç–∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–∑–≤—É—á–∫–∏ –ø–æ –≥–ª–∞–≤–Ω–æ–º—É ID
    const { data: translationsData, error: translationsError } = await supabase
      .from("translations")
      .select("*")
      .eq("anime_id", animeId)
      .order("title");

    if (translationsError) {
      throw translationsError;
    }

    // –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
    const responseData = {
      ...animeData,
      translations: translationsData || [],
    };

    return NextResponse.json(responseData);

  } catch (error) {
    const message = error instanceof Error ? error.message : "Unknown error";
    console.error("‚ùå Error in anime API [id]:", message);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
