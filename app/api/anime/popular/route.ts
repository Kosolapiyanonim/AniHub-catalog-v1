import { NextResponse } from "next/server"

const KODIK_API_URL = "https://kodikapi.com"
const API_TOKEN = process.env.KODIK_API_TOKEN

interface AnimeResult {
  id: string
  type: string
  title: string
  title_orig: string
  other_title: string
  translation: {
    id: number
    title: string
    type: string
  }
  year: number
  material_data: {
    shikimori_id?: string
    kinopoisk_id?: string
    title: string
    anime_title: string
    poster_url: string
    anime_poster_url: string
    description: string
    anime_description: string
    kinopoisk_rating?: number
    shikimori_rating?: number
    shikimori_votes?: number
    anime_genres: string[]
    episodes_total?: number
    anime_status: string
    year: number
  }
  quality: string
  screenshots: string[]
  link: string
}

interface GroupedAnime {
  id: string
  title: string
  title_orig: string
  other_title: string
  year: number
  poster_url: string
  description: string
  rating: number
  shikimori_votes: number
  genres: string[]
  episodes_total?: number
  status: string
  translations: Array<{
    id: string
    title: string
    type: string
    quality: string
    link: string
  }>
  screenshots: string[]
}

function groupAnimeByUniqueId(results: AnimeResult[]): GroupedAnime[] {
  const grouped = new Map<string, GroupedAnime>()

  results.forEach((anime) => {
    const uniqueId =
      anime.material_data?.shikimori_id ||
      anime.material_data?.kinopoisk_id ||
      anime.material_data?.title ||
      anime.title

    if (!grouped.has(uniqueId)) {
      grouped.set(uniqueId, {
        id: anime.id,
        title: anime.material_data?.anime_title || anime.title,
        title_orig: anime.title_orig,
        other_title: anime.other_title,
        year: anime.material_data?.year || anime.year,
        poster_url:
          anime.material_data?.anime_poster_url ||
          anime.material_data?.poster_url ||
          "/placeholder.svg?height=400&width=300",
        description: anime.material_data?.anime_description || anime.material_data?.description || "",
        rating: anime.material_data?.shikimori_rating || anime.material_data?.kinopoisk_rating || 0,
        shikimori_votes: anime.material_data?.shikimori_votes || 0,
        genres: anime.material_data?.anime_genres || [],
        episodes_total: anime.material_data?.episodes_total,
        status: anime.material_data?.anime_status || "unknown",
        translations: [],
        screenshots: anime.screenshots || [],
      })
    }

    const groupedAnime = grouped.get(uniqueId)!
    groupedAnime.translations.push({
      id: anime.id,
      title: anime.translation.title,
      type: anime.translation.type,
      quality: anime.quality,
      link: anime.link,
    })
  })

  return Array.from(grouped.values())
}

export async function GET(request: Request) {
  console.log("üé¨ Popular API called")
  console.log("üîë Token exists:", !!API_TOKEN)

  if (!API_TOKEN) {
    console.error("‚ùå KODIK_API_TOKEN not found in environment variables")
    return NextResponse.json(
      {
        error: "API token not configured",
        environment: process.env.NODE_ENV,
        hasToken: !!API_TOKEN,
      },
      { status: 500 },
    )
  }

  const { searchParams } = new URL(request.url)
  const limit = searchParams.get("limit") || "100" // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const sort = searchParams.get("sort") || "rating"

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è Kodik API
  let sortParam = "shikimori_votes"
  let orderParam = "desc"

  switch (sort) {
    case "rating":
      // –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ Shikimori (–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å)
      sortParam = "shikimori_votes"
      orderParam = "desc"
      break
    case "year":
      sortParam = "year"
      orderParam = "desc"
      break
    case "trending":
      // –î–ª—è —Ç—Ä–µ–Ω–¥–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ Shikimori
      sortParam = "shikimori_rating"
      orderParam = "desc"
      break
    default:
      sortParam = "shikimori_votes"
      orderParam = "desc"
  }

  const apiUrl = `${KODIK_API_URL}/list?token=${API_TOKEN}&types=anime,anime-serial&limit=${limit}&sort=${sortParam}&order=${orderParam}&with_material_data=true`
  console.log("üîó Fetching popular anime with sort:", sort, "param:", sortParam)

  try {
    const response = await fetch(apiUrl, {
      headers: {
        "User-Agent": "Mozilla/5.0 (compatible; AnimeBot/1.0)",
      },
    })

    console.log("üì° Kodik API response status:", response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå Kodik API error:", response.status, errorText)
      throw new Error(`Kodik API returned ${response.status}: ${errorText}`)
    }

    const data = await response.json()
    console.log("‚úÖ Kodik API success, results count:", data.results?.length || 0)

    const groupedResults = groupAnimeByUniqueId(data.results || [])
    console.log("üîÑ Grouped results count:", groupedResults.length)

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–¥–∏–Ω–≥–∞
    if (sort === "trending") {
      const currentYear = new Date().getFullYear() // –¢–µ–ø–µ—Ä—å —ç—Ç–æ 2025
      const recentAnime = groupedResults.filter((a) => a.year >= currentYear - 1) // 2024-2025 –≥–æ–¥—ã
      console.log(`üìÖ Recent anime (${currentYear - 1}-${currentYear}):`, recentAnime.length)
      console.log(
        "üî• Sample recent anime:",
        recentAnime.slice(0, 3).map((a) => ({
          title: a.title,
          year: a.year,
          rating: a.rating,
          votes: a.shikimori_votes,
        })),
      )
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    let sortedResults = groupedResults
    switch (sort) {
      case "rating":
        // –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤, –ø–æ—Ç–æ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        sortedResults = groupedResults
          .filter((anime) => anime.shikimori_votes > 1000) // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–∏–º–µ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
          .sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ (–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å)
            if (b.shikimori_votes !== a.shikimori_votes) {
              return b.shikimori_votes - a.shikimori_votes
            }
            // –ü–æ—Ç–æ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            return b.rating - a.rating
          })
        break
      case "year":
        sortedResults = groupedResults.sort((a, b) => b.year - a.year)
        break
      case "trending":
        // –¢—Ä–µ–Ω–¥–∏–Ω–≥: —É—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –∞–Ω–∏–º–µ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        sortedResults = groupedResults
          .filter((anime) => {
            const currentYear = new Date().getFullYear()

            const isRecent = anime.year >= currentYear - 1 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
            const isQuality = anime.rating > 6.5 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

            // –î–ª—è —Å–≤–µ–∂–∏—Ö –∞–Ω–∏–º–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞) - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if (isRecent) {
              return isQuality && anime.shikimori_votes > 100 // –í—Å–µ–≥–æ 100+ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö
            }

            // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∞–Ω–∏–º–µ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            return isQuality && anime.shikimori_votes > 1000
          })
          .sort((a, b) => {
            const currentYear = new Date().getFullYear()

            // –ë–æ–Ω—É—Å –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å (—á–µ–º –Ω–æ–≤–µ–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å)
            const freshnessBonus = (anime: any) => {
              const age = currentYear - anime.year
              if (age === 0) return 2.5 // 2025 –≥–æ–¥ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!
              if (age === 1) return 2.0 // 2024 –≥–æ–¥ - —Ç–æ–∂–µ –æ—á–µ–Ω—å —Å–≤–µ–∂–∏–π
              if (age === 2) return 1.5 // 2023 –≥–æ–¥
              if (age <= 4) return 1.2 // 2021-2022 –≥–æ–¥–∞
              return 1.0 // –°—Ç–∞—Ä—ã–µ –∞–Ω–∏–º–µ –±–µ–∑ –±–æ–Ω—É—Å–∞
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ (–ª–æ–≥–∞—Ä–∏—Ñ–º –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è)
            const normalizeVotes = (votes: number) => Math.log10(Math.max(votes, 1))

            // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä —Å —É—á–µ—Ç–æ–º —Å–≤–µ–∂–µ—Å—Ç–∏
            const scoreA =
              a.rating * 0.4 + // –†–µ–π—Ç–∏–Ω–≥ (40%)
              normalizeVotes(a.shikimori_votes) * 0.3 + // –ì–æ–ª–æ—Å–∞ (30%)
              freshnessBonus(a) * 0.3 // –°–≤–µ–∂–µ—Å—Ç—å (30%)

            const scoreB = b.rating * 0.4 + normalizeVotes(b.shikimori_votes) * 0.3 + freshnessBonus(b) * 0.3

            return scoreB - scoreA
          })
        break
    }

    const finalResults = sortedResults.slice(0, Number.parseInt(searchParams.get("limit") || "20"))

    console.log(
      "üìä Final results sample:",
      finalResults.slice(0, 3).map((a) => ({
        title: a.title,
        rating: a.rating,
        votes: a.shikimori_votes,
        year: a.year,
      })),
    )

    return NextResponse.json({
      results: finalResults,
      total: finalResults.length,
      sort: sort,
      time: data.time || null,
    })
  } catch (error) {
    console.error("‚ùå Error fetching popular anime:", error)
    return NextResponse.json(
      {
        error: "Failed to fetch anime",
        details: error instanceof Error ? error.message : "Unknown error",
        environment: process.env.NODE_ENV,
      },
      { status: 500 },
    )
  }
}
