// –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ —Ñ–∞–π–ª: /app/admin/parser/page.tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { CheckCircle, XCircle, Loader, Play, Pause } from "lucide-react";

export default function ParserAdminPage() {
  const [logs, setLogs] = useState<string[]>(["–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –≥–æ—Ç–æ–≤–∞."]);
  const [isRunning, setIsRunning] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [stats, setStats] = useState({ processed: 0, errors: 0 });

  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const startParsing = async () => {
    setIsRunning(true);
    setIsPaused(false);
    addLog("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...");

    let page = currentPage;
    let shouldContinue = true;

    while (shouldContinue && !isPaused) {
      try {
        addLog(`üåÄ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}...`);
        const response = await fetch('/api/parse-single-page', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ page }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || `HTTP ${response.status}`);
        }

        addLog(`‚úÖ ${result.message}`);
        setStats(prev => ({ ...prev, processed: prev.processed + result.processed }));

        if (result.hasNextPage) {
          page++;
          setCurrentPage(page);
          await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ 1 —Å–µ–∫
        } else {
          shouldContinue = false;
          addLog("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞. –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.");
          setIsRunning(false);
        }
      } catch (error) {
        const message = error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
        addLog(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}: ${message}`);
        setStats(prev => ({ ...prev, errors: prev.errors + 1 }));
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—É–∑—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        shouldContinue = false;
        setIsRunning(false);
      }
    }
    if (isPaused) {
        addLog("‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }
  };

  const handleStart = () => {
    if (!isRunning) {
      startParsing();
    }
  };

  const handlePause = () => {
    setIsPaused(true);
    setIsRunning(false);
  };

  return (
    <div className="container mx-auto px-4 py-8 pt-24">
      <Card>
        <CardHeader>
          <CardTitle>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º Kodik</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4 mb-4">
            <Button onClick={handleStart} disabled={isRunning}>
              <Play className="mr-2 h-4 w-4" />
              {isPaused || currentPage > 1 ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ù–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥'}
            </Button>
            <Button onClick={handlePause} disabled={!isRunning} variant="outline">
              <Pause className="mr-2 h-4 w-4" />
              –ü–∞—É–∑–∞
            </Button>
          </div>
          <div className="grid grid-cols-3 gap-4 mb-4 text-center">
            <div className="p-4 bg-slate-100 rounded-lg">
              <p className="text-sm text-slate-500">–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</p>
              <p className="text-2xl font-bold">{currentPage}</p>
            </div>
            <div className="p-4 bg-green-100 rounded-lg">
              <p className="text-sm text-green-600">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</p>
              <p className="text-2xl font-bold text-green-700">{stats.processed}</p>
            </div>
            <div className="p-4 bg-red-100 rounded-lg">
              <p className="text-sm text-red-600">–û—à–∏–±–∫–∏</p>
              <p className="text-2xl font-bold text-red-700">{stats.errors}</p>
            </div>
          </div>
          <p className="text-sm text-slate-500 mb-2">–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</p>
          <ScrollArea className="h-72 w-full rounded-md border p-4 font-mono text-sm">
            {logs.map((log, i) => (
              <p key={i}>{log}</p>
            ))}
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}
